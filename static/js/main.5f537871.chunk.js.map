{"version":3,"sources":["components/Wrapper/index.js","components/Head/index.js","components/Table/index.js","components/UserTable/index.js","components/SearchBar/index.js","components/Navbar/index.js","utils/API.js","components/Directory/index.js","components/Body/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Head","Table","users","map","res","key","login","uuid","src","picture","medium","alt","name","first","last","cell","email","format","dob","date","UserTable","id","onClick","sortName","SearchBar","htmlFor","value","onChange","handleInputChange","list","type","placeholder","Navbar","user","axios","get","Directory","_isMounted","state","search","order","filteredUsers","filteredPeople","sorteds","sort","a","b","console","log","setState","event","people","UserInput","target","filter","toLowerCase","indexOf","this","API","then","data","results","Component","Body","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f537871.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper bg-primary\">{props.children}</main>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Head() {\n  return (\n    <div className=\"header\">\n      <h1 className=\"title\">User Directory</h1>\n      <p className=\"info\">Use the searchbar to search for specific employees, or click on the name heading to sort by last name.</p>\n    </div>\n  )\n}\n\nexport default Head;\n","import React from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport \"./style.css\"\r\n\r\nfunction Table(props) {\r\n  \r\n    return (\r\n        <tbody>\r\n            {props.users.map(res => (\r\n                <tr className=\"table\" key={res.login.uuid}>\r\n                    <td>\r\n                        <img src={res.picture.medium} alt=\"User\" />\r\n                    </td>\r\n                    <td>\r\n                        {res.name.first + \" \" + res.name.last}\r\n                    </td>\r\n                    <td>\r\n                        {res.cell}\r\n                    </td>\r\n                    <td>\r\n                        {res.email}\r\n                    </td>\r\n                    <td>\r\n                        <Moment format=\"MM/DD/YYYY\">{res.dob.date}</Moment>\r\n                    </td>\r\n                </tr>\r\n            ))}        \r\n        </tbody>\r\n    );\r\n}\r\n\r\nexport default Table;","import React from \"react\";\r\nimport Table from \"../Table\";\r\nimport \"./style.css\"\r\n\r\nfunction UserTable(props) {\r\n    return (\r\n      <div className=\"datatable mt-5 bg-primary\">\r\n        <table\r\n          id=\"table\"\r\n          className=\"table table-striped table-hover table-condensed\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th onClick={props.sortName}>Name</th>\r\n              <th>Phone</th>\r\n              <th>Email</th>\r\n              <th>DOB</th>\r\n            </tr>\r\n          </thead>\r\n  \r\n          <Table users={props.users}/>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default UserTable;","import React from \"react\";\nimport \"./style.css\";\n\nfunction SearchBar(props) {\n    return (\n      <form className=\"search\">\n        <div className=\"form-group\">\n          <label htmlFor=\"language\">Search Users:</label>\n          <input\n            value={props.value}\n            onChange={props.handleInputChange}\n            name=\"term\"\n            list=\"term\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Filter By Last Name\"\n            id=\"term\"\n          />\n        </div>\n      </form>\n    );\n  }\n\n\n\nexport default SearchBar;\n","import React from \"react\";\nimport Searchbar from \"../SearchBar\";\nimport \"./style.css\";\n\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light\">\n      \n      <div>\n        <Searchbar users={props.user} handleInputChange={props.handleInputChange}/>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=100&nat=us\";\n\n\n\nexport default {\n  findPeople: function() {\n    return axios.get(BASEURL);\n  }\n};\n","import React, { Component } from \"react\";\r\nimport UserTable from \"../UserTable\";\r\nimport Nav from \"../Navbar\";\r\nimport API from \"../../utils/API\";\r\n\r\nclass Directory extends Component {\r\n  _isMounted = false;\r\n  state = {\r\n    search: \"\",\r\n    users: [],\r\n    order: \"\",\r\n    filteredUsers: []\r\n  }\r\n\r\n  componentDidMount()  {\r\n    this._isMounted = true;\r\n    API.findPeople().then(res => {\r\n      if (this._isMounted) {\r\n        this.setState({\r\n          users: res.data.results,\r\n          filteredUsers: res.data.results\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  sortName = () => {\r\n    const filteredPeople = this.state.filteredUsers;\r\n    if (this.state.order === \"ascend\") {\r\n        const sorteds = filteredPeople.sort((a, b) => (a.name.last > b.name.last) ? 1 : -1)\r\n        console.log(sorteds)\r\n\r\n        this.setState({\r\n            filteredUsers: sorteds,\r\n            order: \"descend\"\r\n        })\r\n    } else {\r\n\r\n        const sorteds = filteredPeople.sort((a, b) => (a.name.last > b.name.last) ? -1 : 1)\r\n        console.log(sorteds)\r\n\r\n        this.setState({\r\n            filteredUsers: sorteds,\r\n            order: \"ascend\"\r\n        })\r\n\r\n    }\r\n}\r\n\r\n  \r\n  handleInputChange = event => {\r\n    const people = this.state.users;\r\n    const UserInput = event.target.value;\r\n    const filteredUsers = people.filter(user => user.name.last.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\r\n    )\r\n    console.log(filteredUsers);\r\n    this.setState({\r\n      filteredUsers: filteredUsers\r\n    });\r\n  };\r\n\r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <Nav user={this.state.filteredUsers} handleInputChange={this.handleInputChange} />\r\n      \r\n        <UserTable users={this.state.filteredUsers} sortName={this.sortName}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Directory;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\nimport Directory from \"../Directory\";\n\n\n\nfunction Body() {\n  return (\n    <div className=\"space\">\n      <Directory />\n\n    </div>\n  )\n}\n\nexport default Body;\n\n\n","import React from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport Head from \"./components/Head\";\nimport Body from \"./components/Body\";\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Head>\n\n      </Head>\n      <Body>\n\n      </Body>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}